#!/usr/bin/perl

use strict;
use warnings;

use constant SEGLEN => 64*1024*1024;

sub usage;
sub fatal;

chdir($ENV{'BB_ROOT'} ||= '/var/local/backup') or fatal "chdir $ENV{BB_ROOT}: $!";

usage if @ARGV < 2;
my $t = shift;
my @targets = grep { $_ eq $t || m{^$t/} } all_targets();
my @eum = map { glob("targets/$_/series/*/[0-9]*.eum") } @targets;
fatal "Can't find any targets: $t" if !@eum;
my %tsb2tnf;
foreach my $f (@ARGV) {
    open my $fh, '-|', 'fgrep', $f, @eum or fatal "fgrep: $!";
    while (<$fh>) {
        if (m{^(targets/(\S+?)/series/(\d+)/(\d[^.]+))\.eum:(.)(.) ([a-z*@#]\d+(?: [a-z*@#]\d+)+) (.+)}) {
            my ($base, $target, $series, $backup, $status, $typechar, $stat, $path) = ($1, $2, $3, $4, $5, $6, $7, $8);
            (my $munged_path = $path) =~ s{^\.[^./]+\./}{/};
            if ($f =~ m{/$}) {
                next if substr($munged_path, 0, length $f) ne $f;
            }
            else {
                next if $munged_path ne $f;
            }
            my ($tape, $fnum, $fname);
            if ($status eq '+' && $typechar =~ /[fl]/) {
                $_ = <$fh>;
                last if !defined $_;
                next if !m{^(targets/\S+?/series/\d+/\d[^.]+)\.eum:\^(\d+) \@(\d+) \*(\d+)(?: \#\S+)? (.+)};
                fatal if $1 ne $base;
                my @segs = ($2);
                my ($bgn, $len, $end) = ($3, $4, $3 + $4);
                (my $mp = $5) =~ s{^\.[^./]+\./}{/};
                fatal if $mp ne $munged_path;
                if ($len) {
                    while ($end > SEGLEN) {
                        push @segs, $segs[-1]+1;
                        $end -= SEGLEN;
                    }
                    my $tnf = $tsb2tnf{"$target:$series:$backup"} ||= tsb2tnf($target, $series, $backup);
                    foreach my $seg (@segs) {
                        ($tape, $fnum, $fname) = @{ $tnf->{$seg} || last };
                        if (defined $tape) {
                            print join(' ', $target, $series, $backup, $tape, $fnum, $fname, $status.$typechar, $stat, $path), "\n";
                        }
                    }
                }
            }
            if (!defined $tape) {
                print join(' ', $target, $series, $backup, '-', '-', '-', $status.$typechar, $stat, $path), "\n";
            }
        }
    }
}

# --- Functions
#
sub tsb2tnf {
    my ($t, $s, $b) = @_;
    open my $fh, '<', "targets/$t/series/$s/$b.t0receipt"
        or return {};
    my %h;
    while (<$fh>) {
        next if !/^%log$/;
        my ($tape, $fnum, $bnum);
        while (<$fh>) {
            if (/^T (\S+) .*filenum (\d+)/) {
                ($tape, $fnum) = ($1, $2);
            }
            elsif (/^B (\d+) begin/) {
                $bnum = $1;
            }
            elsif (/^F \d+ ([^\s.]+\.(\d+)\.gz)$/) {
                $h{$2+0} = [ $tape, $fnum, $1 ];
            }
        }
    }
    return \%h;
}

sub all_targets {
    open my $fh, '<', 'targets.list' or fatal "open targets.list: $!";
    my @t;
    while (<$fh>) {
        chomp;
        push @t, $_;
    }
    return @t;
}

sub job {
    my $rcpt = sprintf("targets/%s/series/%d/%s.t0receipt", @_);
    return '-' if ! -e $rcpt;
    open my $fh, '<', $rcpt or fatal "open $rcpt: $!";
    while (<$fh>) {
        return $1 if /^job (\S+)/;
    }
    return '-';
}

sub usage {
    print STDERR "usage: bbfind ...\n";
    exit 1;
}

sub fatal {
    print STDERR "bbfind: $_\n" for @_;
    exit 2;
}

