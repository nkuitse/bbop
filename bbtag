#!/usr/bin/perl

use strict;
use warnings;

use POSIX qw(strftime);
use Getopt::Long
    qw(:config posix_default gnu_compat require_order bundling no_ignore_case);

sub usage;
sub fatal;

my $prog = $0;
(my $bbinv = $0) =~ s{bb\w+$}{bbinv};

my $root = $ENV{'BB_ROOT'} ||= '/var/local/backup';

my ($delete, $purge, $summarize, $want_mode, $want_tape, $want_backup, $verbose, $list, $dryrun, $hum);
my ($maxdate, $minage);
my $tag = '+weed';

my %u2s = qw(
    y   31557600
    w     604800
    d      86400
    h       3600
    m         60
    s          1
);
my %mul = qw(
    K 1024.0
    M 1048576.0
    G 1073741824.0
    T 1099511627776.0
    P 1125899906842624.0
    E 1152921504606846976.0
);

GetOptions(
    'd' => \$delete,
    'x' => \$purge,
    'f' => sub { $want_mode = 'full' },
    'i' => sub { $want_mode = 'incr' },
    'D=s' => \$maxdate,
    'a=s' => \$minage,
    't=s' => \$want_tape,
    'b=s' => \$want_backup,
    'v' => \$verbose,
    'm=s' => \$tag,
    'l' => \$list,
    'n' => \$dryrun,
    'h' => \$hum,
    's' => \$summarize,
) or usage;
if (@ARGV && $ARGV[0] =~ s/^\+//) {
    $tag = shift @ARGV;
}
else {
    $tag =~ s/^\+?//;
}

if (defined $minage) {
    usage if defined $maxdate;
    $maxdate = strftime('%Y%m%dT%H%M%S', localtime(time - dur2sec($minage)));
}
elsif (!defined $maxdate) {
    $maxdate = strftime('%Y%m%dT%H%M%S', localtime);
}
else {
    $maxdate =~ s/
        ^(\d\d\d\d)-?(\d\d)-?(\d\d)(?:T(\d\d):?(\d\d)?:(\d\d))?$
    /
        sprintf '%04d%02d%02dT%02d%02d%02d', $1, $2, $3, $4 || 0, $5 || 0, $6 || 0
    /ex or usage;
}

chdir $root
    or fatal "chdir $root: $!";

if ($dryrun) {
    $verbose = 1;
    blather("Dry run; no changes will be made");
}

if ($list) {
    my @tagged = glob("targets/*/*/series/*/*+$tag");
    my $total_size = 0;
    if (@tagged) {
        foreach my $d (@tagged) {
            my (undef, $t1, $t2, undef, $s, $b) = split m{[/+]}, $d;
            (my $base = $d) =~ s/\+$tag$//;
            my $size = 0;
            my @deleted = glob("$d/*");
            my @other = grep { /\.\d+(?:\.gz)?/ } glob("$base.*");
            my @files = ( @deleted, @other );
            foreach my $f (@files) {
                $size += -s $f;
            }
            printf "%7sB %s %s/%s %s %s\n", num2hum($size), (@deleted ? 'D' : '-'), $t1, $t2, $s, $b;
            $total_size += $size;
        }
    }
    else {
        blather("No tagged backups");
    }
    if ($verbose || $summarize) {
        printf "%7sB total\n", num2hum($total_size);
    }
}
elsif ($purge) {
    my @tagged = glob("targets/*/*/series/*/*+$tag/*");
    my $total_size = 0;
    if (@tagged) {
        blather("Purging data files tagged +$tag");
        foreach my $f (@tagged) {
            blather($f);
            $total_size += -s $f;
            unlink $f or fatal "purge $f: $!" if !$dryrun;
        }
    }
    if ($verbose || $summarize) {
        print STDERR "Total: ", num2hum($total_size), "B deleted\n";
    }
}
else {
    blather(
        "Weeding parameters:",
        "  type ". ($want_mode // 'any'),
        defined($want_tape) ? ("  on tape $want_tape") : (),
        "  tag $tag",
        "  older than $maxdate",
    );
    open my $fh, '-|', $bbinv, '-p', @ARGV
        or fatal "exec bbinv: $!";
    my $total_size = 0;
    while (defined(my $line = <$fh>)) {
        chomp $line;
        my ($action, $size, $target, $series, $backup, $mode, $tape) = split / /, $line;
        next if defined($want_tape) && $tape ne $want_tape;
        next if defined($want_mode) && $mode ne $want_mode;
        next if defined($want_backup) && $backup ne $want_backup;
        next if $backup gt $maxdate;
        $total_size += $size;
        my $base = "targets/$target/series/$series/$backup";
        if (!$dryrun) {
            blather("ignore $target $series $backup :: already tagged $tag"), next if -d "$base+$tag";
            my @files = grep { /^$base.\d+(?:\.gz)?/ } glob("$base.*");
            blather("ignore $target $series $backup :: nothing to tag"), next if !@files;
            -d "$base+$tag" or mkdir "$base+$tag" or fatal "mkdir $base+tag: $!";
            if ($delete) {
                foreach my $f (@files) {
                    my $g = "$base+$tag/".basename($f);
                    rename $f, $g or fatal "rename $f -> $g: $!";
                }
            }
        }
        $size = num2hum($size) if $hum;
        printf $hum ? ("%6s %-16s %-4s %s %-4.4s %s\n", num2hum($size), $target, $series, $backup, $mode, $tape)
                    : ("%10u %-16s %-4s %s %-4.4s %s\n", $size, $target, $series, $backup, $mode, $tape);
        # blather("tagged $target $series $backup :: $size bytes");
    }
    if ($verbose || $summarize) {
        print STDERR "Total: ", num2hum($total_size), "B tagged\n";
    }
}

sub blather {
    return if !$verbose;
    print STDERR "* $_\n" for @_;
}

sub dur2sec {
    my ($p) = @_;
    my $s = 0;
    while ($p =~ s/^(\d+)([ywdhms])\s*//) {
        $s += $1 * $u2s{$2};
    }
    $s += $p if $p =~ /^\d+$/;
    return $s;
}

sub basename {
    local $_ = shift;
    s{.+/}{};
    return $_;
}

sub num2hum {
    local $_ = shift;
    s/(\d+(?:\.\d+)?)/unitize($1)/e;
    return $_;
}

sub unitize {
    my ($n) = @_;
    foreach my $u (qw(E P T G M K)) {
        return sprintf('%.1f', $n/$mul{$u}).$u if $n > $mul{$u};
    }
    return $n;
}

sub sum {
    my $n = 0;
    local $_;
    $n += $_ for @_;
    return $n;
}

